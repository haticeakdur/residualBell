library(tidyverse)
library(bellreg)
library(LambertW)
library(countreg)
library(VGAM)
library(pscl)
##functions##########################
##functions related to bell distribution is taken from bellreg package github page##
dbell <- function(x, theta, log = FALSE){
  Bx <- c()
  for(i in 1:length(x)){
    Bx[i] <- bell(x[i])
  }
  lf <- x*log(theta) - exp(theta)+1 + log(Bx) - lgamma(x+1)
  if(log==TRUE){
    return(lf)
  }else{
    return(exp(lf))
  }
}


pbell <- function(q, theta, lower.tail = TRUE, log.p = FALSE){
  prob <- c()
  for(i in 1:length(q)){
    #prob[i] <- sum(dbell(0:q[i], theta, log=FALSE))
    prob[i] <- ifelse(q[i] < 0, 0, sum(dbell(0:q[i], theta, log=FALSE)) )
  }
  if(lower.tail==FALSE){
    if(log.p==FALSE){
      return(1-prob)
    }else{
      return(log(1-prob))
    }
  }else{
    if(log.p==FALSE){
      return(prob)
    }else{
      return(log(prob))
    }
  }
}

dzibell <- function(x, prob, theta, log = FALSE){
  p <- prob + (1-prob)*dbell(x, theta)
  if(log==TRUE){
    return(log(p))
  }else{
    return(p)
  }
  return(p)
}


pzibell <- function(q, prob, theta, lower.tail = TRUE, log.p = FALSE){
  P <- c()
  for(i in 1:length(q)){
    #prob[i] <- sum(dbell(0:q[i], theta, log=FALSE))
    P[i] <- ifelse(q[i] < 0, 0, sum(dzibell(0:q[i], prob, theta, log=FALSE)) )
  }
  if(lower.tail==FALSE){
    if(log.p==FALSE){
      return(1-P)
    }else{
      return(log(1-P))
    }
  }else{
    if(log.p==FALSE){
      return(P)
    }else{
      return(log(P))
    }
  }
}

dzpois <- function(x,lambda,p)
{return((1-p)*dpois(x,lambda)+p*(x==0))}
pzpois <- function(x,lambda,p)
{return((1-p)*ppois(x,lambda)+p*(x>=0))}
dznbinom <- function(x,size,mu,p)
{return((1-p)*dnbinom(x,size = size, mu = mu)+p*(x==0))}
pznbinom <- function(x,size,mu,p)
{return((1-p)*pnbinom(x,size = size, mu = mu)+p*(x>=0))}
rqr_poi<-function(y,mu){
  #pvalue=ppois (y-1,mu) + dpois (y,mu) * runif(length(y));
  a<-purrr::map2_dbl(y-1,mu,ppois)
  b<-purrr::map2_dbl(y,mu,dpois)*runif(length(y))
  pvalue<-a+b
  pvalue<-pmin(pmax(pvalue,10^{-10}),1-10^{-10})
  return(pvalue)
}

rqr_nb<-function(y,mu,size){pvalue=pnbinom (y-1,size=size, mu=mu)
 + dnbinom (y,size = size, mu = mu) * runif(length(y))
pvalue<-pmin(pmax(pvalue,10^{-10}),1-10^{-10})
return(pvalue)
}
rqr_zip<-function(y,mu,p){pvalue=pzpois(y-1,mu,p) + dzpois (y, mu,p) * runif(length(y))
pvalue<-pmin(pmax(pvalue,10^{-10}),1-10^{-10})
return(pvalue)}

rqr_znb<-function(y,mu,p,size){pvalue=pznbinom (y-1,size,mu,p) + dznbinom (y,size,mu,p) * runif(length(y))
pvalue<-pmin(pmax(pvalue,10^{-10}),1-10^{-10})
return(pvalue)
}

rqr_bell<-function(y,mu){
  pvalue<-c();
  for (i in 1:length(y)){
    if (y[i]==0) {
      pvalue[i]=0+ dbell(y[i], W(mu[i]))* runif(1)
    } else if (y[i]>0) {
      pvalue[i]=pbell(y[i]-1,W(mu[i])) + dbell(y[i], W(mu[i]))* runif(1)
    }
  }
  pvalue<-pmin(pmax(pvalue,10^{-10}),1-10^{-10})
  return(pvalue)
}

rqr_zibell<-function(y,mu,p){
  pvalue<-c();
  for (i in 1:length(y)){
    if (y[i]==0) {
      pvalue[i]=dzibell(y[i], W(mu[i]),p[i])* runif(1)
    } else {
      pvalue[i]=pzibell(y[i]-1,W(mu[i]),p[i]) + dzibell(y[i], W(mu[i]),p[i])* runif(1)
    }
  }
  #pvalue<-pmin(pmax(pvalue,10^{-10}),1-10^{-10})
  return(pvalue)
}

##deviance functions

dev_npnb<-function(object,type="deviance") {
  deviance<-as.vector(residuals(object,type="deviance"));return(deviance)}

dev_bell <- function(y, mu){
  W_y <- LambertW::W(y)
  W_mu <- LambertW::W(mu)
  dev <- ifelse(
    y == 0,
    exp(1-W_mu ),
    exp(W_mu) - exp(W_y) + y *( log(W_y) - log(W_mu) )
  )
  dev2<-sign(y-mu)*2*(dev^0.5)
  
  return(dev2)
}

###
dev_zibell<-function(y,mu,p){
  ni=length(y)
  dzipy0<-c();dzipy<-c();dd<-c();d1<-c();d2<-c();
  for(i in 1:ni){
    b<-(1-p[i])
    c<-p[i]
    if (y[i]==0) {
      
      dd[i]<-2*(exp(W(mu[i]))-exp(W(y[i])))
    } else {
      dd[i]<-2*(y[i]*log(W(y[i])/W(mu[i]))+exp(W(mu[i]))-exp(W(y[i])))
    }
    d2[i]<-sign(y[i]-mu[i])*(dd[i]^0.5)
    
  }
  return(d2)
}
######
zinb.loglik <- function(model, x) {
  mu <- as.vector(predict(model, zitype = "conditional"))
  theta <- model$theta
  size <- theta
  prob <- as.vector(predict(model, zitype = "zprob"))
  
  lik_zero <- pmin(pmax(prob, 1e-10), 1 - 1e-10) # Avoid probabilities too close to 0 or 1
  lik_nonzero <- dnbinom(x, size = size, mu = mu)
  
  lik <- lik_zero * (x == 0) + (1 - lik_zero) * lik_nonzero
  lik[lik == 0] <- min(lik[lik != 0]) # To avoid log-likelihood becoming infinite
  log(lik)
}

zinegbin_dev <- function(model, x) {
  mu_hat <- as.vector(predict(model, zitype = "conditional"))
  pi_hat <- as.vector(predict(model, zitype = "zprob"))
  
  x_hat <- (1 - pi_hat) * mu_hat
  ll <- zinb.loglik(model, x)
  sign <- ifelse(x - x_hat > 0, 1, -1)
  sign[sign == 0] <- -1
  sign * sqrt(-2 * ll)
}

#############
zip.loglik <- function(model, x) {
  mu <- as.vector(predict(model, zitype = "conditional"))
  pi <- as.vector(predict(model, zitype = "zprob"))
  lik_zero <- pmin(pmax(pi, 1e-10), 1 - 1e-10) # Avoid probabilities too close to 0 or 1
  lik_nonzero <- dpois(x, mu)
  
  lik <- lik_zero * (x == 0) + (1 - lik_zero) * lik_nonzero
  
  lik[lik == 0] <- min(lik[lik != 0]) # Avoid log-likelihood becoming infinite
  log(lik)
}

zip_dev <- function(model, x) {
  mu_hat <- as.vector(predict(model, zitype = "conditional"))
  pi_hat <- as.vector(predict(model, zitype = "zprob"))
  
  x_hat <- (1 - pi_hat) * mu_hat
  ll <- zip.loglik(model, x)
  sign <- ifelse(x - x_hat > 0, 1, -1)
  sign[sign == 0] <- -1
  sign * sqrt(ifelse(is.nan(ll), 0, -2 * ll))
}
#####
pear_npnb<-function(object,type="pearson") {
  pearson<-as.vector(residuals(object,type="pearson"));return(pearson)}
# "normal,poisson,nb,zero inf neg bin and poisson"
###as an arguman only model fit object given
pear_bell<-function(y,mu){
  pea<-c();
  a<-y-mu
  b<-mu*(1+W(mu))
  pea<-a/(b)^0.5
  return(pea)
}
###
pear_zibell<-function(y,mu,p){
  ni=length(y)
  pea<-c();
  for(i in 1:ni){
    pea[i]<-(y[i]-(1-p[i])*mu[i])/(((1-p[i])*mu[i]*(1+W(mu[i])+mu[i]*p[i]))^0.5)
  }
  return(pea)
}
#####
